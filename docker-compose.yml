version: '2'

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    container_name: zookeeper
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"  # SSL for external clients
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9092,PLAINTEXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: SSL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_PASSWORD}
      KAFKA_INTER_BROKER_LISTENER_NAME: SSL
      KAFKA_CREATE_TOPICS: "my-topic:1:1"
    container_name: kafka
    depends_on:
      - zookeeper
    volumes:
      - ./secrets/client.keystore.jks:/etc/kafka/secrets/kafka.server.keystore.jks
      - /var/run/docker.sock:/var/run/docker.sock
  mongodb:
    image: mongo:latest
    container_name: mongodb-container
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db
      - ./secrets/mongo.pem:/etc/ssl/mongo.pem  # Mount the server certificate
      - ./secrets/ca.pem:/etc/ssl/ca.pem        # Mount the CA certificate (if using a CA)
    command:
      - mongod
      - --sslMode
      - requireSSL
      - --sslPEMKeyFile
      - /etc/ssl/mongo.pem
      - --sslCAFile
      - /etc/ssl/ca.pem
#sonar - code quality
  sonarqube:
    image: sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
#Sonar-related postgres
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: sonar
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
volumes:
  mongo-data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgres_data:
  grafana-storage:
  prometheus_data:
